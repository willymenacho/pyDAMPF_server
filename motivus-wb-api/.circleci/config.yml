# Elixir CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-elixir/ for more details
version: 2.1

orbs:
  python: circleci/python@0.2.1
  gcp-gke: circleci/gcp-gke@0.2.0
  gcr: circleci/gcp-gcr@0.15.0
  gcp-cli: circleci/gcp-cli@2.4.1

jobs:
  test:
    docker:
      # specify the version here
      - image: circleci/elixir:1.10.4
        environment: # environment variables for primary container
          MIX_ENV: test
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:12.9
        environment: # environment variables for database
          POSTGRES_USER: postgres
          POSTGRES_DB: motivus_wb_api_test
          POSTGRES_PASSWORD: postgres
    working_directory: ~/repo
    steps:
      - checkout
      - run: mix local.hex --force # install Hex locally (without prompt)
      - run: mix local.rebar --force # fetch a copy of rebar (without prompt)
      # specify any bash command here prefixed with `run: `
      - run: mix deps.get
      - run: # special utility that stalls main process until DB is ready
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: mix ecto.setup
      - run: mix test

  deploy:
    machine:
      docker_layer_caching: false
    parameters:
      service-name:
        default: ci_marketplace
        description: Service name used to deploy to kubernetes
        type: string
      namespace:
        default: marketplace
        description: Kubernetes namespace
        type: string
      cluster-name:
        default: motivus-cluster
        description: Kubernetes cluster name
        type: string
      cluster-context:
        default: motivus-cluster
        description: Kubernetes cluster context
        type: string
      environment:
        default: prod
        description: Deployment environment (i.e. Skaffold profile)
        type: string
      dockerhub_user:
        default: DOCKER_LOGIN
        description: The name of the env var containing dockerhub user for authenticated pulls
        type: string
      dockerhub_password:
        default: DOCKER_PASSWORD
        description: The name of the env var containing dockerhub password for authenticated pulls
        type: string
    steps:
      - checkout
      #- pull_submodules
      # - docker/check:
      #     docker-username: << parameters.dockerhub_user >>
      #     docker-password: << parameters.dockerhub_password >>
      - gcp-gke/install
      - gcp-gke/init
      - gcr/gcr-auth:
          registry-url: southamerica-west1-docker.pkg.dev
      - run:
          name: login docker registry
          command: gcloud auth configure-docker southamerica-west1-docker.pkg.dev
      - run:
          name: Install Kustomize
          command: curl -Lo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.3/kustomize_kustomize.v3.2.3_linux_amd64 && chmod +x kustomize && sudo mv kustomize /usr/local/bin
      - run:
          name: Install Skaffold
          command: curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.39.2/skaffold-linux-amd64 && chmod +x skaffold && sudo mv skaffold /usr/local/bin
      - run:
          name: Authorise GKE
          command: gcloud container clusters get-credentials << parameters.cluster-name >> --region $GOOGLE_REGION
      - run:
          name: Set cluster details
          command: kubectl config set-context << parameters.cluster-context >> --namespace=<< parameters.namespace >>
      # - run:
      #     name: Run pre-deployment jobs (will build)
      #     command: skaffold run -f ./skaffold.yaml -p << parameters.environment >>-pre-deployment
      # - run:
      #     name: Wait for migrations job to succeed
      #     command: kubectl wait --for=condition=complete --timeout=300s job/<< parameters.service-name >>-migrations --namespace=<< parameters.namespace >>
      # - run:
      #     name: Wait for collectstatic job to succeed
      #     command: kubectl wait --for=condition=complete --timeout=300s job/<< parameters.service-name >>-collectstatic --namespace=<< parameters.namespace >>
      - run:
          name: Enable Docker deamon
          command: sudo ./docker_enable.sh
      - run:
          name: Auth Docker
          command: docker-credential-gcr configure-docker --registries=southamerica-west1-docker.pkg.dev
      - run:
          name: Auth Docker token
          command: docker-credential-gcr config --token-source="gcloud"
      - run:
          name: Rollout updated deployment
          command: skaffold run -f ./skaffold.yaml -p << parameters.environment >>
      # - run:
      #     name: Wait for rollout of deployment to succeed
      #     command: kubectl rollout status deployment/<< parameters.service-name >>-django

workflows:
  main:
    jobs:
      - test
      - deploy:
          filters:
            branches:
              only:
                - main
          requires:
            - test
